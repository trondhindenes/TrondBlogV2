{"_type": "post", "title": "Building an testing VM images", "publishedAt": "2018-02-11T17:00:08.000Z", "orig_body": "\n<p>As we\u2019re moving to a more immutable infrastructure\u2026. Oh wait.</p>\n<p>As we\u2019re moving to a more disposable infrastructure, there\u2019s an increased reliance on having processes around creating robust images to build vms from.</p>\n<p>Up until now we\u2019ve been using Ansible to call Packer, but it\u2019s time to do some refactoring. Our current process has a few weaknesses:<br />\n\u200a\u2014\u200aImages are hard to test before \u201cgo-live\u201d<br />\n\u200a\u2014\u200aIt\u2019s hard to get log output from the process. Since we\u2019re injecting AWS credentials (which we do _not_ want logged anywhere) we basically have to turn off all logging from Packer\u2019s output.<br />\n\u200a\u2014\u200aIt\u2019s hard to integrate with existing config management tools: Packer has an Ansible \u201cprovisioner\u201d, but it doesn\u2019t support reboots which makes it difficult to use existing code in our packer builds.</p>\n<p>So, we set out to make something better. The new process is more complex, but improves on all 3 pain-points I\u2019ve listed:</p>\n<p><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/0*ledCYczCslQOTu0i.png\" /></p>\n<p>This is all driven by Ansible. Mind you, there is a bit of custom stuff in our playbooks to deal with temporary vms coming and going, but we\u2019re used to that. Ansible definitely has its quirks.</p>\n<p>Things that are better now:<br />\n\u200a\u2014\u200aWe get better logging, because instead of mashing all the things into ugly bash/PowerShell scripts, we use Ansible\u2019s native (and super-broad) support for configuring instances. This makes it _so_ much easier to find problems in the process.<br />\n\u200a\u2014\u200aWe can reboot the base vm at any point, without Packer getting sad<br />\n\u200a\u2014\u200aWe can use all the gazillion lines of code we already have in the form of Ansible roles and modules to configure our vms</p>\n<p>The new model will be run on a schedule, we try and regenerate all of our images once every week. A \u201cbase vm\u201d is spun up and configured in regular Ansible fashion. In time we\u2019ll probably be more granular here and generate unique images for each of our unique requirements. This will enable us to do a lot less than we do today when we provision vms, as most of the \u201cmeat\u201d will already be in the image.</p>\n<p>After the \u201cbase vm\u201d has been configured, we shut it down (the process differs a tiny bit between Linux and Windows here), and create a \u201ccandidate image\u201d. All images are versioned with today\u2019s date. When the candidate image has been created, we spin up a test vm based on that image. This allows us to verify that the image creation worked as intended. Inside the test vm we can use \u201cstandard\u201d test suites such as <a href=\"https://github.com/pester/Pester\">Pester</a> and <a href=\"https://www.inspec.io/\">Inspec</a> to verify that everything is as it should be.</p>\n<p>At this point we know that we have a \u201cgood\u201d image. We create a copy of the \u201ccandidate\u201d image and mark it as \u201cgood\u201d and ready for production.</p>\n<p>We have separate processes that makes sure Cloudformation/Autoscaling-based instances are always based on the latest image, hopefully I\u2019ll find some time to write about that in the near future.</p>\n<p>One important thing we\u2019ve learned along the way:<br />\n\u200a\u2014\u200aIf using Cloudformation/Autoscaling groups, its a good idea to generate unique images\u200a\u2014\u200afor example by naming them with today\u2019s date. You want to make sure that the Autoscaling service is always able to create a vm based on the source image in the LaunchConfig for the group, and this gets broken if you reuse the same image name when you create new ones. Unique image names allow you to control when to \u201cupgrade\u201d your Autoscaling groups to the new image independently of when it was created.</p>\n<p>All in all I\u2019m very optimistic about our new (of somewhat more complex) process. I\u2019m a firm believer in \u201cshift-left\u201d and building \u201cfull-featured\u201d as opposed to deploy-time-configuration\u200a\u2014\u200abut it requires a better verification cycle. Don\u2019t build bad images, folks.</p>\n<p>Anyways, this might not be the most cutting-edge technology in itself, but revamping this stuff will allow us to build other, more interesting things. Very worth it.</p>"}
